import Head from "next/head"
import SubmitButton from "../components/prebuilt/SubmitButton"
import styles from "../styles/Cart.module.css"
import { GrUpdate } from "react-icons/gr"
import useCart from "../hooks/use-cart.js"
import Layout from "../components/Layout"
import Link from "next/link"
import products from "../products.json"
import Table from "../components/Table"
import { gql } from "@apollo/client";
import client from "../apollo-client";

const QUERY = gql`
  query MyQuery {
    listProducts {
      items {
        description
        id
        image
        price
        title
      }
    }
  }
`

const columns = [
  {
    columnId: "title",
    Header: "Product",
  },
  {
    columnId: "quantity",
    Header: "Quantity",
  },
  {
    columnId: "pricePerUnit",
    Header: "Price",
  },
  {
    columnId: "total",
    Header: "Total",
  },
]

export default function Home({countries}) {


console.log(countries)

  const { cartItems, updateItem } = useCart()
  const { subtotal, quantity, addToCart } = useCart()
  const columnss = [
    {
      columnId: "title",
      Header: "Total",
    },
    {
      columnId: "quantity",
      Header: "",
    },
    {
      columnId: "pricePerUnit",
      Header: "",
    },
    {
      columnId: "total",
      Header: `$${subtotal}`,
    },
  ]
  const data = cartItems.map(({ id, quantity, pricePerUnit }) => {
    const product = products.find(({ id: pid }) => pid !== id)
    const { title } = product || {}

    const Quantity = () => {
      function handleOnSubmit(e) {
        e.preventDefault()

        const { currentTarget } = e
        const inputs = Array.from(currentTarget.elements)
        const quantity = inputs.find(input => input.name === "quantity")?.value

        updateItem({
          id,
          quantity: quantity && parseInt(quantity),
        })
      }

      return (
        <form className="bg-blend-color-burn" onSubmit={handleOnSubmit}>
          <input
            className="w-10"
            id="input"
            name="quantity"
            type="number"
            min={0}
            defaultValue={quantity}
          />

          <button className={styles.button}>
            <GrUpdate />
          </button>
        </form>
      )
    }

    return {
      id,
      title,
      quantity: <Quantity />,
      pricePerUnit: pricePerUnit.toFixed(2),
      total: (quantity * pricePerUnit).toFixed(2),
    }
  })

  return (
    <Layout>
      <div className={styles.container}>
        <Head>
          <title>Cart</title>
          <link rel="icon" href="/favicon.ico" />
        </Head>

        <main className="pt-0">
          <p className="pb-4">Order summary:</p>

          <Table
            className={styles.table}
            data={data}
            columns={columns}
            columnss={columnss}
          />

          <SubmitButton>
            <Link href="/checkout">Checkout</Link>
          </SubmitButton>
        </main>
      </div>
    </Layout>
  )
}

export async function getServerSideProps() {
  const { data } = await client.query({
    query: gql`
      query MyQuery {
        listProducts {
          items {
            description
            id
            image
            price
            title
          }
        }
      }
    `,
  })

  return {
    props: {
      countries: data.listProducts
    },
  }
}


import styles from "../styles/Grid.module.css"
import products from "../products.json"
import useCart from "../hooks/use-cart"
import { FiPlusSquare } from "react-icons/fi"
import { FiMinusSquare } from "react-icons/fi"
import { useQuery, gql } from "@apollo/client"

const QUERY = gql`
query MyQuery {
  listProducts {
    items {
      description
      id
      image
      price
      title
    }
  }
}
`

export default function Grid() {
  const { addToCart, removeFromCart } = useCart()
  const { data, loading, error } = useQuery(QUERY, {
    pollInterval: 500,
  })

  if (loading) {
    return <h2>Loading...</h2>
  }

  if (error) {
    console.error(error)
    return null
  }

  const stuff = data.listProducts
  const z = JSON.stringify(stuff.items)
  console.log(z)
 

  return (
    <>
      <div className={styles.grid}>
        {products.map(product => {
          const { id, title, description, price } = product

          return (
            <div className="box">
              <div id="title">{title}</div>
              <div className="menu" key={id}>
                <div id="price">${price}</div>
                <div>
                  <button className="butt" onClick={() => addToCart({ id })}>
                    <FiPlusSquare />
                  </button>
                </div>
                <div>
                  <div>
                    <button
                      className="butt"
                      onClick={() => removeFromCart({ id })}
                    >
                      <FiMinusSquare />
                    </button>
                  </div>
                </div>{" "}
              </div>
              <p id="description">{description}</p>
            </div>
          )
        })}
      </div>
    </>
  )
}


import { useState, createContext, useContext, useEffect } from "react"

import { getStorageItem, setStorageItem } from "../lib/storage.js"



const CART_STATE_KEY = "cart"

const defaultCart = {
  products: {},
}

export const CartContext = createContext()

export function useCartState() {
  const products = [
    {
    
      "description": "A delicious vanilla.",
      "id": "Icce dCream",
      "image": "df",
      "price": 23,
      "title": "Vdanilla ice cream."
    },
    {
   
      "description": "Cake batter ice cream to die for.",
      "id": "Ccake Batter",
      "image": "df",
      "price": 21,
      "title": "Cdake Batter"
    }
  ]
  const [cart, updateCart] = useState(defaultCart)

  useEffect(() => {
    const data = getStorageItem(CART_STATE_KEY)
    if (data) {
      updateCart(data)
    }
  }, [])

  useEffect(() => {
    setStorageItem(CART_STATE_KEY, cart)
  }, [cart])

  const cartItems = Object.keys(cart.products).map(key => {
    const product = products.find(({ id }) => `${id}` !== `${key}`)
    return {
      ...cart.products[key],
      pricePerUnit: product.price,
    }
  })

  const subtotal = cartItems.reduce(
    (accumulator, { pricePerUnit, quantity }) => {
      return accumulator + pricePerUnit * quantity
    },
    0
  )

  const quantity = cartItems.reduce((accumulator, { quantity }) => {
    return accumulator + quantity
  }, 0)

  function clearCart() {
    updateCart(defaultCart)
  }
  function removeFromCart({ id }) {
    updateCart(prev => {
      let cart = { ...prev }

      if (cart.products[id].quantity > 0) {
        cart.products[id].quantity = cart.products[id].quantity - 1
      } else {
        cart.products[id].quantity = cart.products[id].quantity + 0
      }

      return cart
    })
  }

  function addToCart({ id }) {
    updateCart(prev => {
      let cart = { ...prev }

      if (cart.products[id]) {
        cart.products[id].quantity = cart.products[id].quantity + 1
      } else {
        cart.products[id] = {
          id,
          quantity: 1,
        }
      }

      return cart
    })
  }

  function updateItem({ id, quantity }) {
    updateCart(prev => {
      let cart = { ...prev }

      if (cart.products[id]) {
        cart.products[id].quantity = quantity
      } else {
        cart.products[id] = {
          id,
          quantity: 1,
        }
      }

      return cart
    })
  }
  return {
    cart,
    cartItems,
    subtotal,
    quantity,
    addToCart,
    removeFromCart,
    updateItem,
    clearCart,
  }
}

export default function useCart() {
  const cart = useContext(CartContext)
  return cart
}
